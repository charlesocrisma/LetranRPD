@{
    Layout = "~/Views/Shared/_AdminNav.cshtml";
}
@using LetranRPD.Models
@model List<ServiceInformation>
@Html.AntiForgeryToken()


@{
    Func<int, string> GetStatusClass = (status) =>
    {
        switch (status)
        {
            case 0: return "pending";   // Not yet started
            case 1: return "active";    // In progress
            case 2: return "completed"; // Finished
            default: return "pending";
        }
    };

    Func<int, string> GetStatusText = (status) =>
    {
        switch (status)
        {
            case 0: return "Pending";
            case 1: return "Processing";
            case 2: return "Completed";
            default: return "Pending";
        }
    };
}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Research Progress Management</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/admin/tracking.css" asp-append-version="true" />

</head>
<body data-color-scheme="light">
    <div class="main-container">

        <div class="page-header">
            <h1 class="page-title">
                <i class="fas fa-clipboard-list"></i>
                Research Progress Management
            </h1>
            <p class="page-subtitle">Monitor and update student research submissions across all departments</p>
        </div>

        <!-- Statistics Row -->
        <div class="stats-row">
            <div class="stat-card">
                <div class="stat-number" id="totalSubmissions">6</div>
                <div class="stat-label">Total Submissions</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="processingCount">3</div>
                <div class="stat-label">Processing</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="completedCount">2</div>
                <div class="stat-label">Complete</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="failedCount">1</div>
                <div class="stat-label">Failed</div>
            </div>
        </div>

        <!-- Collapsible Filter Section -->
        <div class="filter-section collapsed" id="filterSection">
            <div class="filter-toggle" id="filterToggle">
                <span class="filter-toggle-text">
                    <i class="fas fa-filter"></i>
                    Filter & Search
                </span>
                <i class="fas fa-chevron-down filter-toggle-icon"></i>
            </div>
            <div class="filter-content" id="filterContent">
                <div class="search-container">
                    <input type="text" class="search-input" id="searchInput" placeholder="Search by name, student number, or service..." />
                    <i class="fas fa-search search-icon"></i>
                </div>

                <div class="filters-grid">
                    <div class="filter-group">
                        <label class="filter-label">Department:</label>
                        <div class="filter-tabs" id="departmentTabs">
                            <!-- Tabs will be populated by JavaScript -->
                        </div>
                    </div>

                    <div class="filter-group">
                        <label class="filter-label">Service:</label>
                        <div class="filter-tabs" id="serviceTabs">
                            <!-- Tabs will be populated by JavaScript -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Students Table Container -->
        <div class="table-wrapper" id="submissionsTableContainer">
            <!-- Table will be populated by JavaScript -->
        </div>

        <!-- Service Steps Modal -->
        <div id="serviceStepsModal" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 id="modalTitle">Service Steps</h3>
                    <span class="close" onclick="closeServiceStepsModal()">&times;</span>
                </div>
                <div class="modal-body" id="modalBody">
                    <!-- Service steps will be populated here -->
                </div>
            </div>
        </div>

    </div>

    <script>

    const serviceInfoFromDb = @Json.Serialize(Model);

            let currentServiceId = null;
        // Stores the serviceId for the remarks modal
        let currentRemarksServiceId = null;

    // --- HELPER FUNCTIONS ---

    function getStepStatus(progressValue) {
        switch (progressValue) {
            case 1: return "current";
            case 2: return "complete";
            case 3: return "revision";
            case 0:
            default:
                return "pending";
        }
    }

    function convertJsStatusToDbInt(statusString) {
        switch (statusString) {
            case "current": return 1;
            case "complete": return 2;
            case "revision": return 3;
            case "pending":
            default:
                return 0;
        }
    }

    function formatDate(dateString) {
        if (!dateString) return "N/A";
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
    }

    function getFileIcon(fileName) {
        const ext = fileName.split('.').pop().toLowerCase();
        switch (ext) {
            case 'pdf': return 'fa-file-pdf';
            case 'doc':
            case 'docx': return 'fa-file-word';
            case 'xls':
            case 'xlsx': return 'fa-file-excel';
            case 'png':
            case 'jpg':
            case 'jpeg':
            case 'gif': return 'fa-file-image';
            case 'zip':
            case 'rar': return 'fa-file-archive';
            default: return 'fa-file-alt'; // Default file icon
        }
    }

    // --- DATA TRANSFORMATION ---

    function transformDbData(si) {
        const prog = si.serviceProgress;
        const stepStatuses = [
            getStepStatus(prog.progress1),
            getStepStatus(prog.progress2),
            getStepStatus(prog.progress3),
            getStepStatus(prog.progress4)
        ];

        let status = "processing";
        if (stepStatuses.includes("revision")) {
            status = "failed";
        } else if (stepStatuses.every(s => s === "complete")) {
            status = "complete";
        }

        let currentStep = stepStatuses.findIndex(s => s === "current") + 1;
        if (currentStep === 0 && status !== 'complete' && status !== 'failed') {
            currentStep = stepStatuses.findIndex(s => s === "pending") + 1;
        }
        if (currentStep === 0 && status === 'complete') {
            currentStep = stepStatuses.length;
        }

        const serviceKey = si.serviceType.toLowerCase().replace(/ /g, '-');
        const allReceivedFiles = [
            ...(prog.progress1files || []),
            ...(prog.progress2files || []),
            ...(prog.progress3files || []),
            ...(prog.progress4files || [])
        ];
        return {
            "id": si.serviceId, // This is the ServiceId
            "name": si.author,
            "studentNumber": si.studentNumber,
            "department": si.subject,
            "course": "N/A",
            "service": serviceKey,
            "serviceName": si.serviceType,
            "status": status,
            "currentStep": currentStep,
            "totalSteps": 4,
            "runCount": prog.runCount || 1, // <-- FIXED: Load from DB
            "dateSubmitted": prog.appliedDate,
            "lastUpdated": prog.appliedDate, // You might want a different 'lastUpdated' field
            "receivedFiles": allReceivedFiles,
            "sendFiles": 0,
            "remarks": prog.remarks || "", // <-- FIXED: Load from DB
            "stepStatuses": stepStatuses
        };
    }

    // --- APPLICATION STATE (RENAMED) ---

    const submissionsFromDb = serviceInfoFromDb.map(transformDbData);
    const departmentsFromDb = [...new Set(submissionsFromDb.map(s => s.department))];
    const servicesFromDb = [...new Map(submissionsFromDb.map(s => [s.service, { key: s.service, name: s.serviceName }])).values()];

    const applicationData = {
        "submissions": submissionsFromDb, // RENAMED
        "departments": departmentsFromDb,
        "services": servicesFromDb,
        "generalStatusTypes": [
            { "key": "processing", "name": "Processing", "color": "#3b82f6" },
            { "key": "complete", "name": "Complete", "color": "#10b981" },
            { "key": "failed", "name": "Failed", "color": "#ef4444" }
        ],
        "stepStatusTypes": [
            { "key": "pending", "name": "PENDING", "color": "#94a3b8" },
            { "key": "current", "name": "CURRENT", "color": "#3b82f6" },
            { "key": "complete", "name": "COMPLETE", "color": "#10b981" },
            { "key": "revision", "name": "REVISION", "color": "#fd7e14" }
        ],
        // FIXED: Populated serviceSteps to match your 'showServiceSteps' function
        "serviceSteps": {
            "originality-check": {
                "title": "Originality Check Guide",
                "steps": [
                    { "number": 1, "title": "Submission", "details": "Student submits document (e.g., proposal, final paper).", "processingTime": "N/A" },
                    { "number": 2, "title": "Admin Scan", "details": "Admin runs the document through Turnitin.", "processingTime": "1-2 hours" },
                    { "number": 3, "title": "Review", "details": "Admin reviews the similarity report for issues.", "processingTime": "1 working day" },
                    { "number": 4, "title": "Feedback", "details": "Admin sends the report back to the student with remarks (Pass/Revision).", "processingTime": "1 working day" }
                ],
                "note": "Note: A similarity index of 20% or lower is generally required."
            },
            "instrument-validation": {
                "title": "Instrument Validation Guide",
                "steps": [
                    { "number": 1, "title": "Submission", "details": "Student submits validation-ready instrument and list of potential validators.", "processingTime": "N/A" },
                    { "number": 2, "title": "Admin Assigns", "details": "Admin contacts and assigns 3-5 validators.", "processingTime": "2-3 working days" },
                    { "number": 3, "title": "Validation", "details": "Validators provide feedback and scores on the instrument.", "processingTime": "5-7 working days" },
                    { "number": 4, "title": "Analysis", "details": "Admin computes CVI/Cronbach's Alpha and sends results to student.", "processingTime": "1-2 working days" }
                ],
                "note": "Note: This service may take longer depending on validator availability."
            },
            // (Add similar data for your other services...)
            "language-editing": {
                "title": "Language Editing Guide",
                 "steps": [
                    { "number": 1, "title": "Submission", "details": "Student submits full manuscript for editing.", "processingTime": "N/A" },
                    { "number": 2, "title": "Assign Editor", "details": "Admin assigns a language editor.", "processingTime": "1 working day" },
                    { "number": 3, "title": "Editing", "details": "Editor provides track-changed document.", "processingTime": "3-5 working days" },
                    { "number": 4, "title": "Final Review", "details": "Admin reviews and sends final edited document to student.", "processingTime": "1 working day" }
                ],
                "note": ""
            },
            "data-analysis": {
                "title": "Data Analysis Guide",
                 "steps": [
                    { "number": 1, "title": "Submission", "details": "Student submits raw data (e.g., Excel) and research questions.", "processingTime": "N/A" },
                    { "number": 2, "title": "Assign Statistician", "details": "Admin assigns a statistician.", "processingTime": "1 working day" },
                    { "number": 3, "title": "Analysis", "details": "Statistician performs analysis and prepares results tables.", "processingTime": "3-5 working days" },
                    { "number": 4, "title": "Send Results", "details": "Admin sends completed analysis and interpretation guide.", "processingTime": "1 working day" }
                ],
                "note": ""
            },
            "student-research-clearance": {
                "title": "Research Clearance Guide",
                 "steps": [
                    { "number": 1, "title": "Submission", "details": "Student submits completed manuscript and all required forms.", "processingTime": "N/A" },
                    { "number": 2, "title": "Completion Check", "details": "Admin checks for completion of all prior steps (e.g., ethics, editing).", "processingTime": "1-2 working days" },
                    { "number": 3, "title": "Signatures", "details": "Admin forwards for final signatures from department heads.", "processingTime": "2-3 working days" },
                    { "number": 4, "title": "Issue Clearance", "details": "Admin issues the final, signed research clearance document.", "processingTime": "1 working day" }
                ],
                "note": ""
            },
            "ethics-review": {
                "title": "Ethics Review Guide",
                 "steps": [
                    { "number": 1, "title": "Submission", "details": "Student submits ethics packet (proposal, consent forms, etc.).", "processingTime": "N/A" },
                    { "number": 2, "title": "Initial Screening", "details": "Admin performs initial screening for completeness.", "processingTime": "1-2 working days" },
                    { "number": 3, "title": "ERB Review", "details": "Ethics Review Board (ERB) reviews the submission.", "processingTime": "5-10 working days" },
                    { "number": 4, "title": "Issue Decision", "details": "ERB issues decision (Approved, Minor Revisions, Full Review).", "processingTime": "1 working day" }
                ],
                "note": "Ethics review timelines can vary significantly based on the complexity."
            }
        }
    };

    let currentDepartment = 'all';
    let currentService = 'all';
    let expandedRow = null;
    let filteredSubmissions = [...applicationData.submissions]; // RENAMED

    // --- INITIALIZATION ---

    document.addEventListener('DOMContentLoaded', function () {
        initializeApp();
    });

    function initializeApp() {
        setupFilterTabs(); // Setup filters first
        applyFilters(); // This will call renderTable and updateStatistics
        setupEventListeners();

        const filterSection = document.getElementById('filterSection');
        if (filterSection) {
            filterSection.classList.add('collapsed');
        }
    }

    // --- EVENT LISTENERS ---

    function setupEventListeners() {
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.addEventListener('input', handleSearch);
        }
        const filterToggle = document.getElementById('filterToggle');
        if (filterToggle) {
            filterToggle.addEventListener('click', toggleFilterSection);
        }
    }

    function setupFilterTabs() {
        // ... (This function looks fine)
        const departmentContainer = document.getElementById('departmentTabs');
        if (departmentContainer) {
            departmentContainer.innerHTML = '';
            const allDeptTab = createFilterTab('All Departments', 'all', currentDepartment === 'all');
            allDeptTab.onclick = () => filterByDepartment('all');
            departmentContainer.appendChild(allDeptTab);
            applicationData.departments.forEach(dept => {
                const tab = createFilterTab(dept, dept, currentDepartment === dept);
                tab.onclick = () => filterByDepartment(dept);
                departmentContainer.appendChild(tab);
            });
        }
        const serviceContainer = document.getElementById('serviceTabs');
        if (serviceContainer) {
            serviceContainer.innerHTML = '';
            const allServiceTab = createFilterTab('All Services', 'all', currentService === 'all');
            allServiceTab.onclick = () => filterByService('all');
            serviceContainer.appendChild(allServiceTab);
            applicationData.services.forEach(service => {
                const tab = createFilterTab(service.name, service.key, currentService === service.key);
                tab.onclick = () => filterByService(service.key);
                serviceContainer.appendChild(tab);
            });
        }
    }

    function createFilterTab(text, value, isActive) {
        const tab = document.createElement('button');
        tab.className = `filter-tab ${isActive ? 'active' : ''}`;
        tab.textContent = text;
        tab.setAttribute('data-value', value);
        return tab;
    }

    function toggleFilterSection() {
        const filterSection = document.getElementById('filterSection');
        if (filterSection) {
            filterSection.classList.toggle('collapsed');
        }
    }

    // --- FILTERING & SEARCH (RENAMED) ---

    function handleSearch(event) {
        const searchTerm = event.target.value.toLowerCase().trim();
        let baseList = [...applicationData.submissions];

        if (searchTerm !== '') {
            baseList = applicationData.submissions.filter(submission => { // RENAMED
                return submission.name.toLowerCase().includes(searchTerm) ||
                    submission.studentNumber.toLowerCase().includes(searchTerm) ||
                    submission.serviceName.toLowerCase().includes(searchTerm) ||
                    submission.department.toLowerCase().includes(searchTerm);
            });
        }
        // Store the search-filtered list globally before applying tab filters
        filteredSubmissions = baseList;
        applyFilters();
    }

    function filterByDepartment(department) {
        currentDepartment = department;
        document.querySelectorAll('#departmentTabs .filter-tab').forEach(tab => {
            tab.classList.toggle('active', tab.getAttribute('data-value') === department);
        });
        applyFilters();
    }

    function filterByService(service) {
        currentService = service;
        document.querySelectorAll('#serviceTabs .filter-tab').forEach(tab => {
            tab.classList.toggle('active', tab.getAttribute('data-value') === service);
        });
        applyFilters();
    }

    function applyFilters() {
        // Start from the latest search-filtered list
        let filtered = [...filteredSubmissions];

        if (currentDepartment !== 'all') {
            filtered = filtered.filter(submission => submission.department === currentDepartment);
        }

        if (currentService !== 'all') {
            filtered = filtered.filter(submission => submission.service === currentService);
        }

        renderTable(filtered);
        // Update global stats based on the *original* full dataset
        updateStatistics(applicationData.submissions); 
    }

    // --- TABLE RENDERING (RENAMED) ---

    function renderTable(submissions = applicationData.submissions) { // RENAMED
        // RENAMED ID
        const tableContainer = document.getElementById('submissionsTableContainer'); 
        if (!tableContainer) return;

        const table = `
            <div class="table-container">
                <div class="table-header">
                    <h3 class="table-title">
                        <i class="fas fa-users"></i>
                        Research Submissions (${submissions.length})
                    </h3>
                </div>
                <table class="students-table">
                    <thead>
                        <tr>
                            <th>Student</th>
                            <th>Subject</th>
                            <th>Research Title</th>
                            <th>Department</th>
                            <th>Service</th>
                            <th>Status</th>
                            <th>Progress</th>
                            <th>Last Updated</th>
                            <th>Guide</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${submissions.length > 0 ?
                            submissions.map(submission => createSubmissionRow(submission)).join('') : // RENAMED
                            '<tr><td colspan="7" style="text-align:center; padding: 2rem; color: #6b7280;">No submissions found.</td></tr>'
                        }
                    </tbody>
                </table>
            </div>
        `;

        tableContainer.innerHTML = table;
    }

    function createSubmissionRow(submission) { // RENAMED
        const isComplete = submission.status === 'complete';
        const currentStepForProgress = isComplete ? submission.totalSteps : submission.currentStep;
        const progressPercentage = Math.round((currentStepForProgress / submission.totalSteps) * 100);
        const statusClass = `status-${submission.status}`;
        const initials = submission.name.split(' ').map(n => n[0]).join('').substring(0, 2);

        return `
            <tr class="student-row" onclick="toggleSubmissionDetails('${submission.id}')" data-service-id="${submission.id}">
                <td>
                    <div class="student-info">
                        <div class="student-avatar">${initials}</div>
                        <div class="student-details">
                            <h4>${submission.name}</h4>
                            <p>${submission.studentNumber} • ${submission.course}</p>
                        </div>
                    </div>
                </td>
                <td>
                    <span class="department-text">${submission.department}</span>
                </td>
                 <td>
                    <span class="department-text">${submission.title}</span>
                </td>
                 <td>
                        <span class="department-text">${submission.departments}</span>
                    </td>
                <td>
                    <span class="service-badge">${submission.serviceName}</span>
                </td>
                <td>
                    <span class="status-badge ${statusClass}">${submission.status}</span>
                </td>
                <td>
                    <div class="progress-container">
                        <div class="progress-bar">
                            <div class="progress-fill ${statusClass}" style="width: ${progressPercentage}%"></div>
                        </div>
                        <div class="progress-text">${currentStepForProgress}/${submission.totalSteps} steps</div>
                    </div>
                </td>
                <td>${formatDate(submission.lastUpdated)}</td>
                <td>
                    <button class="action-btn info-btn" onclick="event.stopPropagation(); showServiceSteps('${submission.service}')" title="View Service Steps">
                        <i class="fas fa-info-circle"></i>
                    </button>
                </td>
            </tr>
            <tr class="expanded-content hidden" id="expanded-${submission.id}">
                <td colspan="7">
                    ${createExpandedContent(submission)}
                </td>
            </tr>
        `;
    }

    function createExpandedContent(submission) { // RENAMED
        return `
            <div class="expanded-inner">
                <div class="control-section">
                    <div class="section-header">
                        <i class="fas fa-cogs"></i>
                        Progress Control
                    </div>

                    <div class="progress-controls">
                        <div class="control-group">
                            <label class="control-label">General Status:</label>
                            <select class="status-select" onchange="updateGeneralStatus('${submission.id}', this.value)">
                                ${applicationData.generalStatusTypes.map(status =>
                                    `<option value="${status.key}" ${submission.status === status.key ? 'selected' : ''}>
                                        ${status.name}
                                    </option>`
                                ).join('')}
                            </select>
                        </div>

                        <div class="control-group">
                            <label class="control-label">Run Count:</label>
                            <div class="run-count-controls">
                                <button class="run-count-btn" onclick="updateRunCount('${submission.id}', -1)">
                                    <i class="fas fa-minus"></i>
                                </button>
                                <span class="run-count-display" id="runCount-${submission.id}">${submission.runCount}</span>
                                <button class="run-count-btn" onclick="updateRunCount('${submission.id}', 1)">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    </div>

                    <div class="step-management">
                        <div class="section-header">
                            <i class="fas fa-list-ol"></i>
                            Step Management
                        </div>

                        <div class="step-indicator">
                            ${submission.stepStatuses.map((status, index) =>
                                `<div class="step-dot ${status}" title="Step ${index + 1}: ${status.toUpperCase()}">${index + 1}</div>`
                            ).join('')}
                        </div>

                        <div class="step-status-controls">
                            ${submission.stepStatuses.map((status, index) => `
                                <div class="step-status-item">
                                    <span class="step-label">Step ${index + 1}:</span>
                                    <select class="step-status-select" onchange="updateStepStatus('${submission.id}', ${index}, this.value)">
                                        ${applicationData.stepStatusTypes.map(stepStatus =>
                                            `<option value="${stepStatus.key}" ${status === stepStatus.key ? 'selected' : ''}>
                                                ${stepStatus.name}
                                            </option>`
                                        ).join('')}
                                    </select>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                </div>

                <div class="control-section">
                    <div class="section-header">
                        <i class="fas fa-folder-open"></i>
                        File Management
                    </div>

                    <div class="file-tabs">
                        <button class="file-tab active" onclick="switchFileTab(event, '${submission.id}', 'received')">
                            Received Files <span class="file-count">${submission.receivedFiles.length}</span>
                        </button>
                        <button class="file-tab" onclick="switchFileTab(event, '${submission.id}', 'send')">
                            Send to Student <span class="file-count" id="send-file-count-${submission.id}">${submission.sendFiles}</span>
                        </button>
                    </div>

                    <div class="file-content" id="fileContent-${submission.id}">
                        ${createReceivedFilesContent(submission)}
                    </div>

                    <div class="section-header" style="margin-top: 1.5rem;">
                        <i class="fas fa-comment-alt"></i>
                        Remarks
                    </div>

                    <textarea class="remarks-textarea" placeholder="Add remarks..." onchange="updateRemarks('${submission.id}', this.value)">${submission.remarks}</textarea>

                    <div class="action-buttons">
                        <button class="action-btn btn-primary" onclick="saveChanges(${submission.id})">
                            <i class="fas fa-save"></i> Save Changes
                        </button>
                        <button class="action-btn btn-secondary" onclick="toggleSubmissionDetails('${submission.id}')">
                            <i class="fas fa-times"></i> Close
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    function createReceivedFilesContent(submission) { // RENAMED
        return `
            <div class="file-list">
                ${submission.receivedFiles.length > 0 ?
                    submission.receivedFiles.map((fileName, index) => `
                        <div class="file-item">
                            <div class="file-icon">
                                <i class="fas ${getFileIcon(fileName)}"></i>
                            </div>
                            <div class="file-info">
                                <div class="file-name">${fileName}</div>
                            </div>
                            <div class="file-actions">
                                <a href="/uploads/Service_${submission.id}/${fileName}" class="file-action-btn btn-download" title="Download ${fileName}" download>
                                    <i class="fas fa-download"></i>
                                </a>
                            </div>
                        </div>
                    `).join('') :
                    '<p style="text-align: center; color: #6b7280; padding: 2rem;">No files received yet</p>'
                }
            </div>
        `;
    }

    function createSendFilesContent(submission) { // RENAMED
        return `
            <div class="drag-drop-area" onclick="document.getElementById('fileInput-${submission.id}').click()">
                <div class="drag-drop-text">
                    <i class="fas fa-cloud-upload-alt" style="font-size: 2rem; margin-bottom: 1rem; color: #3b82f6;"></i><br>
                    Click to upload files or drag and drop<br>
                    <small>PDF, DOC, DOCX files up to 10MB</small>
                </div>
                <input type="file" id="fileInput-${submission.id}" multiple accept=".pdf,.doc,.docx" style="display: none;" onchange="handleFileUpload('${submission.id}', this.files)">
            </div>
            <div class="file-list" id="send-file-list-${submission.id}">
                <p style="text-align: center; color: #6b7280; padding: 1rem;">No files staged for sending</p>
            </div>
        `;
    }

    function setupTableEventListeners() {
        // This was empty in your file, so I've left it
    }

    // --- UI INTERACTIONS (RENAMED) ---

   function toggleSubmissionDetails(serviceId) {
    const expandedRowElement = document.getElementById(`expanded-${serviceId}`);
    const submissionRow = document.querySelector(`[data-service-id="${serviceId}"]`);

    if (expandedRowElement && submissionRow) {
        const isExpanded = !expandedRowElement.classList.contains('hidden');

        // Close all others
        document.querySelectorAll('.expanded-content').forEach(row => {
            row.classList.add('hidden');
        });
        document.querySelectorAll('.student-row').forEach(row => {
            row.classList.remove('expanded');
        });

        // Toggle this one
        if (!isExpanded) {
            expandedRowElement.classList.remove('hidden');
            submissionRow.classList.add('expanded');
            expandedRow = serviceId; // Store just the ID
        } else {
            expandedRow = null;
        }
    }
}

    function switchFileTab(event, serviceId, tabType) { // RENAMED
        const submission = applicationData.submissions.find(s => s.id === serviceId); // RENAMED
        if (!submission) return;

        // Update tab states
        const tabContainer = event.currentTarget.parentElement;
        tabContainer.querySelectorAll('.file-tab').forEach(tab => tab.classList.remove('active'));
        event.currentTarget.classList.add('active');

        // Update content
        const contentContainer = document.getElementById(`fileContent-${serviceId}`);
        if (contentContainer) {
            if (tabType === 'received') {
                contentContainer.innerHTML = createReceivedFilesContent(submission);
            } else {
                contentContainer.innerHTML = createSendFilesContent(submission);
            }
        }
    }

    // --- LOCAL DATA UPDATES (RENAMED) ---

    function updateGeneralStatus(serviceId, newStatus) { // RENAMED
        const submission = applicationData.submissions.find(s => s.id === serviceId); // RENAMED
        if (submission) {
            submission.status = newStatus;
            submission.lastUpdated = new Date().toISOString(); // More precise
            
            // Auto-update steps based on general status
            if (newStatus === 'complete') {
                submission.stepStatuses = submission.stepStatuses.map(() => 'complete');
            } else if (newStatus === 'failed') {
                const revisionIndex = submission.stepStatuses.findIndex(s => s !== 'complete');
                if (revisionIndex !== -1) {
                    submission.stepStatuses[revisionIndex] = 'revision';
                }
            } else if (newStatus === 'processing') {
                 // If moving from failed/complete back to processing, set first non-complete to 'current'
                 const currentIndex = submission.stepStatuses.findIndex(s => s === 'current');
                 if (currentIndex === -1) {
                    const firstPending = submission.stepStatuses.findIndex(s => s === 'pending' || s === 'revision');
                    if (firstPending !== -1) {
                        submission.stepStatuses[firstPending] = 'current';
                    }
                 }
            }

            // Re-render the table to reflect changes (applyFilters re-applies search/tabs)
            const currentSearch = document.getElementById('searchInput').value;
            handleSearch({ target: { value: currentSearch } }); // This re-runs search and applyFilters


        }
    }

    function updateRunCount(serviceId, delta) { // RENAMED
        const submission = applicationData.submissions.find(s => s.id === serviceId); // RENAMED
        if (submission) {
            const newCount = Math.max(1, (submission.runCount || 1) + delta); // Default to 1, min 1
            submission.runCount = newCount;

            const display = document.getElementById(`runCount-${serviceId}`);
            if (display) {
                display.textContent = newCount;
            }
        }
    }

    function updateStepStatus(serviceId, stepIndex, newStatus) { // RENAMED
        const submission = applicationData.submissions.find(s => s.id === serviceId); // RENAMED
        if (submission && stepIndex >= 0 && stepIndex < submission.stepStatuses.length) {
            submission.stepStatuses[stepIndex] = newStatus;

            // Auto-update general status
            if (submission.stepStatuses.includes("revision")) {
                submission.status = "failed";
            } else if (submission.stepStatuses.every(s => s === "complete")) {
                submission.status = "complete";
            } else {
                submission.status = "processing";
            }
            
            // Update the general status dropdown in the expanded view
            const statusSelect = document.querySelector(`#expanded-${serviceId} .status-select`);
            if (statusSelect) {
                statusSelect.value = submission.status;
            }

            // Update the visual indicator
            const stepDot = document.querySelector(`#expanded-${serviceId} .step-dot:nth-child(${stepIndex + 1})`);
            if (stepDot) {
                stepDot.className = `step-dot ${newStatus}`;
                stepDot.title = `Step ${stepIndex + 1}: ${newStatus.toUpperCase()}`;
            }

            // Find and update the main row in the table without a full re-render
            const mainRow = document.querySelector(`[data-service-id="${serviceId}"]`);
            if (mainRow) {
                 // Update status badge
                const statusBadge = mainRow.querySelector('.status-badge');
                if (statusBadge) {
                    statusBadge.className = `status-badge status-${submission.status}`;
                    statusBadge.textContent = submission.status;
                }
                // Update progress bar
                const isComplete = submission.status === 'complete';
                const currentStepForProgress = isComplete ? submission.totalSteps : submission.currentStep;
                const progressPercentage = Math.round((currentStepForProgress / submission.totalSteps) * 100);
                
                const progressFill = mainRow.querySelector('.progress-fill');
                if (progressFill) {
                    progressFill.className = `progress-fill status-${submission.status}`;
                    progressFill.style.width = `${progressPercentage}%`;
                }
                const progressText = mainRow.querySelector('.progress-text');
                if (progressText) {
                    progressText.textContent = `${currentStepForProgress}/${submission.totalSteps} steps`;
                }
            }
            // Update global stats
            updateStatistics(applicationData.submissions);
        }
    }

    function updateRemarks(serviceId, remarks) { // RENAMED
        const submission = applicationData.submissions.find(s => s.id === serviceId); // RENAMED
        if (submission) {
            submission.remarks = remarks;
        }
    }

    function handleFileUpload(serviceId, files) { // RENAMED
        console.log(`Uploading ${files.length} files for service ${serviceId}`);

        const submission = applicationData.submissions.find(s => s.id === serviceId); // RENAMED
        if (submission) {
            // This is just a visual simulation. Real uploads need a server.
            submission.sendFiles += files.length;
            document.getElementById(`send-file-count-${serviceId}`).textContent = submission.sendFiles;

            const fileList = document.getElementById(`send-file-list-${serviceId}`);
            if (fileList) {
                // Clear "no files" message
                if (fileList.querySelector('p')) {
                    fileList.innerHTML = '';
                }
                // Add new files
                for (let file of files) {
                     fileList.innerHTML += `
                        <div class="file-item staged-file">
                            <div class="file-icon"><i class="fas ${getFileIcon(file.name)}"></i></div>
                            <div class="file-info">
                                <div class="file-name">${file.name}</div>
                                <div class="file-size">${(file.size / 1024 / 1024).toFixed(2)} MB</div>
                            </div>
                            <div class="file-actions">
                                <button class="file-action-btn btn-delete" title="Remove" onclick="this.parentElement.parentElement.remove()">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    `;
                }
            }
        }
    }

    // --- SERVER COMMUNICATION (RENAMED) ---

    async function saveChanges(serviceId) { // RENAMED
        const submission = applicationData.submissions.find(s => s.id === serviceId); // RENAMED
        if (!submission) {
            alert('Error: Could not find submission data.');
            return;
        }

        const saveButton = document.querySelector(`#expanded-${serviceId} .btn-primary`);
        if (saveButton) {
            saveButton.disabled = true;
            saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
        }

        const payload = {
            serviceId: submission.id, // This is the ServiceId
            progress1: convertJsStatusToDbInt(submission.stepStatuses[0]),
            progress2: convertJsStatusToDbInt(submission.stepStatuses[1]),
            progress3: convertJsStatusToDbInt(submission.stepStatuses[2]),
            progress4: convertJsStatusToDbInt(submission.stepStatuses[3]),
            runCount: submission.runCount,
            remarks: submission.remarks
        };
            console.log(payload);

        try {
            const response = await fetch('/Admin/UpdateProgress', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    // TODO: Add Anti-Forgery Token header if needed
                },
                body: JSON.stringify(payload)
            });

            if (response.ok) {
                const result = await response.json();
                console.log('Save successful', result);
                alert('Changes saved successfully!');

                submission.lastUpdated = new Date().toISOString();
                
                // Update the 'Last Updated' cell in the main row
                const mainRow = document.querySelector(`[data-service-id="${serviceId}"]`);
                if(mainRow) {
                    const dateCell = mainRow.cells[5]; // 6th cell (index 5)
                    if(dateCell) {
                        dateCell.textContent = formatDate(submission.lastUpdated);
                    }
                }

            } else {
                const errorText = await response.text();
                console.error('Save failed:', errorText);
                alert(`Error: Could not save changes. Server said: ${errorText}`);
            }
        } catch (error) {
            console.error('Error saving changes:', error);
            alert('Error: A network error occurred while saving.');
        } finally {
            if (saveButton) {
                saveButton.disabled = false;
                saveButton.innerHTML = '<i class="fas fa-save"></i> Save Changes';
            }
        }
    }

    // --- STATS & MODAL (RENAMED) ---

    function updateStatistics(submissions = applicationData.submissions) { // RENAMED
        const stats = {
            total: submissions.length,
            processing: submissions.filter(s => s.status === 'processing').length,
            complete: submissions.filter(s => s.status === 'complete').length,
            failed: submissions.filter(s => s.status === 'failed').length
        };

        // RENAMED ID
        const elements = {
            totalSubmissions: document.getElementById('totalSubmissions'),
            processingCount: document.getElementById('processingCount'),
            completedCount: document.getElementById('completedCount'),
            failedCount: document.getElementById('failedCount')
        };

        if (elements.totalSubmissions) elements.totalSubmissions.textContent = stats.total;
        if (elements.processingCount) elements.processingCount.textContent = stats.processing;
        if (elements.completedCount) elements.completedCount.textContent = stats.complete;
        if (elements.failedCount) elements.failedCount.textContent = stats.failed;
    }


    function showServiceSteps(serviceKey) {
        const modal = document.getElementById('serviceStepsModal');
        const modalTitle = document.getElementById('modalTitle');
        const modalBody = document.getElementById('modalBody');

        const serviceData = applicationData.serviceSteps[serviceKey];
        if (!serviceData || !serviceData.steps) {
            console.warn(`No service step data found for key: ${serviceKey}`);
            modalTitle.textContent = "Guide Not Available";
            modalBody.innerHTML = "<p>The guide for this service has not been set up yet.</p>";
        } else {
            modalTitle.textContent = serviceData.title;

            let stepsHTML = '<div class="service-steps-container">';
            serviceData.steps.forEach(step => {
                stepsHTML += `
                    <div class="service-step-item">
                        <div class="service-step-number">${step.number}</div>
                        <div class="service-step-content">
                            <h4 class="service-step-title">${step.title}</h4>
                            <div class="service-step-details">${step.details}</div>
                            <div class="service-step-time"><strong>Processing Time:</strong> ${step.processingTime}</div>
                        </div>
                    </div>
                `;
            });
            stepsHTML += '</div>';

            if (serviceData.note) {
                stepsHTML += `<div class="service-note"><strong>Note:</strong> ${serviceData.note}</div>`;
            }

            stepsHTML += '<div class="service-end-transaction">END OF TRANSACTION</div>';
            modalBody.innerHTML = stepsHTML;
        }
            
        modal.style.display = 'block';

        // Close modal when clicking outside
        modal.onclick = function (event) {
            if (event.target === modal) {
                closeServiceStepsModal();
            }
        };
    }

    // FIXED: Completed this function
    function closeServiceStepsModal() {
        const modal = document.getElementById('serviceStepsModal');
        if (modal) {
            modal.style.display = 'none';
        }
    }

</script>
</body>
</html>