@{
    Layout = "~/Views/Shared/_AdminNav.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Management</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/admin/user.css" asp-append-version="true" />
</head>

<body>
    <div class="container">
        <!-- Header Banner -->
        <header class="header-banner">
            <div class="header-content">
                <h1 class="header-title">
                    <i class="fas fa-users"></i>
                    User Management
                </h1>
                <p class="header-subtitle">Manage users, roles, and permissions across your organization</p>
            </div>
        </header>

        <!-- Stats Cards -->
        <div class="stats-grid">
            <div class="stat-card stat-card--primary">
                <div class="stat-number" id="totalUsers">12</div>
                <div class="stat-label">Total Users</div>
            </div>
            <div class="stat-card stat-card--success">
                <div class="stat-number" id="activeStudents">8</div>
                <div class="stat-label">Students</div>
            </div>
            <div class="stat-card stat-card--warning">
                <div class="stat-number" id="activeAdmins">4</div>
                <div class="stat-label">Admins</div>
            </div>
        </div>

        <!-- Filter & Search Section -->
        <div class="filter-section">
            <div class="filter-header">
                <h3 class="filter-title">
                    <i class="fas fa-filter"></i>
                    Filter & Search
                </h3>
                <button class="filter-toggle" id="filterToggle">
                    <i class="fas fa-chevron-down"></i>
                </button>
            </div>

            <div class="filter-content" id="filterContent" style="display: none;">
                <!-- Search Bar -->
                <div class="search-container">
                    <div class="search-wrapper">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text" id="searchInput" class="search-input" placeholder="Search by name, email, or ID...">
                        <button class="search-clear" id="searchClear" style="display: none;">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>

                <!-- Filter Buttons -->
                <div class="filter-buttons-grid">
                    <div class="filter-group">
                        <label class="filter-label">Role:</label>
                        <div class="filter-buttons">
                            <button class="filter-btn active" data-filter="role" data-value="all">All</button>
                            <button class="filter-btn" data-filter="role" data-value="Student">Students</button>
                            <button class="filter-btn" data-filter="role" data-value="Admin">Admins</button>
                        </div>
                    </div>

                    <div class="filter-group">
                        <label class="filter-label">Department:</label>
                        <div class="filter-buttons">
                            <button class="filter-btn active" data-filter="department" data-value="all">All Departments</button>
                            <button class="filter-btn" data-filter="department" data-value="CEIT">Engineering & IT</button>
                            <button class="filter-btn" data-filter="department" data-value="CBAA">Business Administration</button>
                            <button class="filter-btn" data-filter="department" data-value="CELAS">Education & Liberal Arts</button>
                            <button class="filter-btn" data-filter="department" data-value="RPD">Research & Publication</button>
                            <button class="filter-btn" data-filter="department" data-value="SHS">Senior High School</button>
                        </div>
                    </div>
                </div>

                <div class="filter-actions">
                    <button class="btn btn-secondary" id="clearFilters">
                        <i class="fas fa-times"></i> Clear All
                    </button>
                    <button class="btn btn-primary" id="exportData">
                        <i class="fas fa-download"></i> Export Data
                    </button>
                </div>
            </div>
        </div>

        <!-- Users Table -->
        <div class="table-section">
            <div class="table-header">
                <h3 class="table-title">
                    <i class="fas fa-users"></i>
                    User Directory (<span id="userCount">12</span>)
                </h3>
                <div class="table-actions">
                    <button class="btn btn-secondary btn-small" id="refreshData">
                        <i class="fas fa-refresh"></i> Refresh
                    </button>
                    <button class="btn btn-primary" id="addUserBtn">
                        <i class="fas fa-plus"></i> Add New User
                    </button>
                </div>
            </div>

            <div class="table-container">
                <table class="users-table">
                    <thead>
                        <tr>
                            <th>
                                <label class="checkbox-wrapper">
                                    <input type="checkbox" id="selectAll">
                                    <span class="checkbox-custom"></span>
                                </label>
                            </th>
                            <th>User</th>
                            <th>Department</th>
                            <th>Role</th>
                            <th>Last Login</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="usersTableBody">
                        <!-- Users will be populated here -->
                    </tbody>
                </table>
            </div>

            <!-- Empty State -->
            <div class="empty-state" id="emptyState" style="display: none;">
                <div class="empty-state-icon">
                    <i class="fas fa-users"></i>
                </div>
                <h3>No users found</h3>
                <p>Try adjusting your search criteria or filters</p>
                <button class="btn btn-primary" id="addFirstUser">
                    <i class="fas fa-plus"></i> Add Your First User
                </button>
            </div>
        </div>

        <!-- Pagination -->
        <div class="pagination-container">
            <div class="pagination-info">
                <select id="pageSize" class="form-control page-size-select">
                    <option value="10">10 per page</option>
                    <option value="25" selected>25 per page</option>
                    <option value="50">50 per page</option>
                    <option value="100">100 per page</option>
                </select>
            </div>
            <div class="pagination" id="pagination">
                <!-- Pagination will be populated here -->
            </div>
        </div>
    </div>

    <!-- Add/Edit User Modal -->
    <div class="modal hidden" id="userModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="userModalTitle">Add New User</h3>
                <button class="modal-close" id="closeUserModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <form id="userForm">
                    <div class="form-group">
                        <label for="userName" class="form-label">Full Name *</label>
                        <input type="text" id="userName" name="name" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label for="userEmail" class="form-label">Email Address *</label>
                        <input type="email" id="userEmail" name="email" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label for="useridno" class="form-label">Student/Employee ID *</label>
                        <input type="text" id="useridno" name="idno" class="form-control" required>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="userDepartment" class="form-label">Department *</label>
                            <select id="userDepartment" name="department" class="form-control" required>
                                <option value="">Select Department</option>
                                <option value="CEIT">College of Engineering and Information Technology</option>
                                <option value="CBAA">College of Business Administration and Accountancy</option>
                                <option value="CELAS">College of Education, Liberal Arts, and Sciences</option>
                                <option value="RPD">Research and Publication Department</option>
                                <option value="SHS">Senior High School Department</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="userRole" class="form-label">Role *</label>
                            <select id="userRole" name="role" class="form-control" required>
                                <option value="">Select Role</option>
                                <option value="Student">Student</option>
                                <option value="Admin">Admin</option>
                            </select>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" id="cancelUserModal">Cancel</button>
                <button type="submit" form="userForm" class="btn btn-primary" id="saveUserBtn">
                    <i class="fas fa-save"></i> Save User
                </button>
            </div>
        </div>
    </div>

    <!-- Confirmation Modal -->
    <div class="modal hidden" id="confirmModal">
        <div class="modal-content modal-small">
            <div class="modal-header">
                <h3 id="confirmModalTitle">Confirm Action</h3>
                <button class="modal-close" id="closeConfirmModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="confirm-content">
                    <div class="confirm-icon" id="confirmIcon">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <p id="confirmMessage">Are you sure you want to perform this action?</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" id="cancelConfirm">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmAction">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Toast Notifications -->
    <div class="toast-container" id="toastContainer"></div>

    <script>
        class UserManagement {
            constructor() {
                this.users = [
                    {
                        id: 1,
                        name: "John Martinez",
                        email: "john.martinez@letran.edu.ph",
                        idno: "CS2021-001",
                        department: "CEIT",
                        departmentFull: "College of Engineering and Information Technology",
                        role: "Student",
                        lastLogin: "2025-10-03T08:30:00Z",
                        initials: "JM"
                    },
                    {
                        id: 2,
                        name: "Sarah Johnson",
                        email: "sarah.johnson@letran.edu.ph",
                        idno: "BS2020-045",
                        department: "CBAA",
                        departmentFull: "College of Business Administration and Accountancy",
                        role: "Student",
                        lastLogin: "2025-10-02T16:45:00Z",
                        initials: "SJ"
                    },
                    {
                        id: 3,
                        name: "Dr. Michael Chen",
                        email: "m.chen@letran.edu.ph",
                        idno: "ADM001",
                        department: "RPD",
                        departmentFull: "Research and Publication Department",
                        role: "Admin",
                        lastLogin: "2025-10-03T07:15:00Z",
                        initials: "MC"
                    },
                    {
                        id: 4,
                        name: "Emily Rodriguez",
                        email: "emily.rodriguez@letran.edu.ph",
                        idno: "ED2021-087",
                        department: "CELAS",
                        departmentFull: "College of Education, Liberal Arts, and Sciences",
                        role: "Student",
                        lastLogin: "2025-10-01T14:20:00Z",
                        initials: "ER"
                    },
                    {
                        id: 5,
                        name: "Prof. David Wilson",
                        email: "d.wilson@letran.edu.ph",
                        idno: "ADM012",
                        department: "RPD",
                        departmentFull: "Research and Publication Department",
                        role: "Admin",
                        lastLogin: "2025-10-02T12:30:00Z",
                        initials: "DW"
                    },
                    {
                        id: 6,
                        name: "Lisa Thompson",
                        email: "lisa.thompson@letran.edu.ph",
                        idno: "SH2021-156",
                        department: "SHS",
                        departmentFull: "Senior High School Department",
                        role: "Student",
                        lastLogin: "2025-09-28T14:22:00Z",
                        initials: "LT"
                    },
                    {
                        id: 7,
                        name: "Robert Kim",
                        email: "robert.kim@letran.edu.ph",
                        idno: "BA2020-234",
                        department: "CBAA",
                        departmentFull: "College of Business Administration and Accountancy",
                        role: "Student",
                        lastLogin: "2025-09-25T11:45:00Z",
                        initials: "RK"
                    },
                    {
                        id: 8,
                        name: "Amanda Foster",
                        email: "amanda.foster@letran.edu.ph",
                        idno: "ED2023-067",
                        department: "CELAS",
                        departmentFull: "College of Education, Liberal Arts, and Sciences",
                        role: "Student",
                        lastLogin: "2025-10-03T09:20:00Z",
                        initials: "AF"
                    },
                    {
                        id: 9,
                        name: "Dr. Maria Santos",
                        email: "m.santos@letran.edu.ph",
                        idno: "ADM003",
                        department: "RPD",
                        departmentFull: "Research and Publication Department",
                        role: "Admin",
                        lastLogin: "2025-10-03T06:45:00Z",
                        initials: "MS"
                    },
                    {
                        id: 10,
                        name: "James Wilson",
                        email: "james.wilson@letran.edu.ph",
                        idno: "IT2021-234",
                        department: "CEIT",
                        departmentFull: "College of Engineering and Information Technology",
                        role: "Student",
                        lastLogin: "2025-10-02T11:30:00Z",
                        initials: "JW"
                    },
                    {
                        id: 11,
                        name: "Dr. Jennifer Lee",
                        email: "j.lee@letran.edu.ph",
                        idno: "ADM004",
                        department: "RPD",
                        departmentFull: "Research and Publication Department",
                        role: "Admin",
                        lastLogin: "2025-10-02T15:30:00Z",
                        initials: "JL"
                    },
                    {
                        id: 12,
                        name: "Kevin Brown",
                        email: "kevin.brown@letran.edu.ph",
                        idno: "SH2022-156",
                        department: "SHS",
                        departmentFull: "Senior High School Department",
                        role: "Student",
                        lastLogin: "2025-10-03T10:15:00Z",
                        initials: "KB"
                    }
                ];

                this.filteredUsers = [...this.users];
                this.selectedUsers = new Set();
                this.currentPage = 1;
                this.pageSize = 25;

                this.filters = {
                    role: 'all',
                    department: 'all',
                    search: ''
                };

                this.currentEditingUser = null;
                this.init();
            }

            init() {
                this.setupEventListeners();
                this.updateStats();
                this.renderTable();
                this.updateUserCount();
                this.renderPagination();
            }

            setupEventListeners() {
                // Filter toggle
                document.getElementById('filterToggle').addEventListener('click', this.toggleFilters);

                // Search
                document.getElementById('searchInput').addEventListener('input', this.debounce((e) => {
                    this.filters.search = e.target.value.toLowerCase();
                    this.applyFilters();
                    this.toggleSearchClear();
                }, 300));

                document.getElementById('searchClear').addEventListener('click', () => {
                    document.getElementById('searchInput').value = '';
                    this.filters.search = '';
                    this.applyFilters();
                    this.toggleSearchClear();
                });

                // Filter buttons
                document.addEventListener('click', (e) => {
                    if (e.target.closest('.filter-btn')) {
                        this.handleFilterClick(e.target.closest('.filter-btn'));
                    }
                });

                // Clear filters
                document.getElementById('clearFilters').addEventListener('click', () => {
                    this.clearAllFilters();
                });

                // Export data
                document.getElementById('exportData').addEventListener('click', () => {
                    this.exportData();
                });

                // Refresh data
                document.getElementById('refreshData').addEventListener('click', () => {
                    this.refreshData();
                });

                // Add user
                document.getElementById('addUserBtn').addEventListener('click', () => {
                    this.openUserModal();
                });

                document.getElementById('addFirstUser').addEventListener('click', () => {
                    this.openUserModal();
                });

                // Table interactions
                document.getElementById('usersTableBody').addEventListener('click', (e) => {
                    this.handleTableClick(e);
                });

                // Select all
                document.getElementById('selectAll').addEventListener('change', (e) => {
                    this.toggleSelectAll(e.target.checked);
                });

                // Modal controls
                document.getElementById('closeUserModal').addEventListener('click', () => {
                    this.closeUserModal();
                });

                document.getElementById('cancelUserModal').addEventListener('click', () => {
                    this.closeUserModal();
                });

                document.getElementById('userForm').addEventListener('submit', (e) => {
                    this.handleUserSubmit(e);
                });

                // Confirmation modal
                document.getElementById('closeConfirmModal').addEventListener('click', () => {
                    this.closeConfirmModal();
                });

                document.getElementById('cancelConfirm').addEventListener('click', () => {
                    this.closeConfirmModal();
                });

                // Page size change
                document.getElementById('pageSize').addEventListener('change', (e) => {
                    this.pageSize = parseInt(e.target.value);
                    this.currentPage = 1;
                    this.renderTable();
                    this.renderPagination();
                });

                // Modal backdrop close
                document.getElementById('userModal').addEventListener('click', (e) => {
                    if (e.target.classList.contains('modal')) {
                        this.closeUserModal();
                    }
                });

                document.getElementById('confirmModal').addEventListener('click', (e) => {
                    if (e.target.classList.contains('modal')) {
                        this.closeConfirmModal();
                    }
                });
            }

            toggleFilters = () => {
                const content = document.getElementById('filterContent');
                const toggle = document.getElementById('filterToggle');
                const isVisible = content.style.display !== 'none';

                if (isVisible) {
                    content.style.display = 'none';
                    toggle.querySelector('i').className = 'fas fa-chevron-down';
                } else {
                    content.style.display = 'block';
                    toggle.querySelector('i').className = 'fas fa-chevron-up';
                }
            }

            handleFilterClick(button) {
                const filterType = button.dataset.filter;
                const filterValue = button.dataset.value;

                // Update active state
                const group = button.closest('.filter-group');
                group.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');

                // Update filter
                this.filters[filterType] = filterValue;
                this.applyFilters();
            }

            applyFilters() {
                this.filteredUsers = this.users.filter(user => {
                    let matches = true;

                    // Search filter
                    if (this.filters.search) {
                        const searchTerm = this.filters.search.toLowerCase();
                        matches = matches && (
                            user.name.toLowerCase().includes(searchTerm) ||
                            user.email.toLowerCase().includes(searchTerm) ||
                            user.idno.toLowerCase().includes(searchTerm)
                        );
                    }

                    // Role filter
                    if (this.filters.role !== 'all') {
                        matches = matches && user.role === this.filters.role;
                    }

                    // Department filter
                    if (this.filters.department !== 'all') {
                        matches = matches && user.department === this.filters.department;
                    }

                    return matches;
                });

                this.currentPage = 1;
                this.selectedUsers.clear();
                this.renderTable();
                this.updateUserCount();
                this.renderPagination();
            }

            clearAllFilters() {
                this.filters = {
                    role: 'all',
                    department: 'all',
                    search: ''
                };

                // Reset UI
                document.getElementById('searchInput').value = '';
                document.querySelectorAll('.filter-btn').forEach(btn => {
                    btn.classList.remove('active');
                    if (btn.dataset.value === 'all') {
                        btn.classList.add('active');
                    }
                });

                this.applyFilters();
                this.toggleSearchClear();
            }

            toggleSearchClear() {
                const searchClear = document.getElementById('searchClear');
                const searchInput = document.getElementById('searchInput');
                searchClear.style.display = searchInput.value.length > 0 ? 'block' : 'none';
            }

            updateStats() {
                const total = this.users.length;
                const students = this.users.filter(u => u.role === 'Student').length;
                const admins = this.users.filter(u => u.role === 'Admin').length;

                document.getElementById('totalUsers').textContent = total;
                document.getElementById('activeStudents').textContent = students;
                document.getElementById('activeAdmins').textContent = admins;
            }

            updateUserCount() {
                document.getElementById('userCount').textContent = this.filteredUsers.length;
            }

            renderTable() {
                const tbody = document.getElementById('usersTableBody');
                const emptyState = document.getElementById('emptyState');

                if (this.filteredUsers.length === 0) {
                    tbody.innerHTML = '';
                    emptyState.style.display = 'block';
                    return;
                }

                emptyState.style.display = 'none';

                // Calculate pagination
                const startIndex = (this.currentPage - 1) * this.pageSize;
                const endIndex = startIndex + this.pageSize;
                const pageUsers = this.filteredUsers.slice(startIndex, endIndex);

                tbody.innerHTML = pageUsers.map(user => `
                    <tr data-user-id="${user.id}" ${this.selectedUsers.has(user.id) ? 'class="selected"' : ''}>
                        <td>
                            <label class="checkbox-wrapper">
                                <input type="checkbox" ${this.selectedUsers.has(user.id) ? 'checked' : ''}>
                                <span class="checkbox-custom"></span>
                            </label>
                        </td>
                        <td>
                            <div class="user-info">
                                <div class="user-avatar" style="background: ${this.getAvatarColor(user.name)}">
                                    ${user.initials}
                                </div>
                                <div class="user-details">
                                    <div class="user-name">${user.name}</div>
                                    <div class="user-meta">${user.idno} • ${user.email}</div>
                                </div>
                            </div>
                        </td>
                        <td class="department-cell">${user.departmentFull}</td>
                        <td>
                            <span class="role-badge role-${user.role.toLowerCase()}">${user.role}</span>
                        </td>
                        <td class="date-cell">${this.formatLastLogin(user.lastLogin)}</td>
                        <td>
                            <div class="action-buttons">
                                <button class="action-btn action-btn--edit" title="Edit User" data-action="edit">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="action-btn action-btn--delete" title="Delete User" data-action="delete">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `).join('');
            }

            renderPagination() {
                const totalPages = Math.ceil(this.filteredUsers.length / this.pageSize);
                const pagination = document.getElementById('pagination');

                if (totalPages <= 1) {
                    pagination.innerHTML = '';
                    return;
                }

                let paginationHTML = '';

                // Previous button
                paginationHTML += `
                    <button class="pagination-btn" ${this.currentPage === 1 ? 'disabled' : ''}
                            onclick="userManagement.goToPage(${this.currentPage - 1})">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                `;

                // Page numbers
                const startPage = Math.max(1, this.currentPage - 2);
                const endPage = Math.min(totalPages, this.currentPage + 2);

                if (startPage > 1) {
                    paginationHTML += `<button class="pagination-btn" onclick="userManagement.goToPage(1)">1</button>`;
                    if (startPage > 2) {
                        paginationHTML += `<span class="pagination-ellipsis">...</span>`;
                    }
                }

                for (let i = startPage; i <= endPage; i++) {
                    paginationHTML += `
                        <button class="pagination-btn ${i === this.currentPage ? 'active' : ''}"
                                onclick="userManagement.goToPage(${i})">${i}</button>
                    `;
                }

                if (endPage < totalPages) {
                    if (endPage < totalPages - 1) {
                        paginationHTML += `<span class="pagination-ellipsis">...</span>`;
                    }
                    paginationHTML += `<button class="pagination-btn" onclick="userManagement.goToPage(${totalPages})">${totalPages}</button>`;
                }

                // Next button
                paginationHTML += `
                    <button class="pagination-btn" ${this.currentPage === totalPages ? 'disabled' : ''}
                            onclick="userManagement.goToPage(${this.currentPage + 1})">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                `;

                pagination.innerHTML = paginationHTML;
            }

            goToPage(page) {
                const totalPages = Math.ceil(this.filteredUsers.length / this.pageSize);
                if (page >= 1 && page <= totalPages) {
                    this.currentPage = page;
                    this.renderTable();
                    this.renderPagination();
                }
            }

            handleTableClick(e) {
                const tr = e.target.closest('tr');
                if (!tr || !tr.dataset.userId) return;

                const userId = parseInt(tr.dataset.userId);

                // Handle checkbox
                if (e.target.type === 'checkbox') {
                    this.toggleUserSelection(userId, e.target.checked);
                    return;
                }

                // Handle action buttons
                const action = e.target.closest('[data-action]')?.dataset.action;
                if (action) {
                    const user = this.users.find(u => u.id === userId);
                    if (action === 'edit') {
                        this.openUserModal(user);
                    } else if (action === 'delete') {
                        this.confirmAction('delete', `Delete user "${user.name}"?`,
                            'This action cannot be undone.', () => this.deleteUser(userId));
                    }
                }
            }

            toggleUserSelection(userId, selected) {
                if (selected) {
                    this.selectedUsers.add(userId);
                } else {
                    this.selectedUsers.delete(userId);
                }

                // Update row appearance
                const row = document.querySelector(`[data-user-id="${userId}"]`);
                if (selected) {
                    row.classList.add('selected');
                } else {
                    row.classList.remove('selected');
                }

                this.updateSelectAllState();
            }

            toggleSelectAll(selectAll) {
                const startIndex = (this.currentPage - 1) * this.pageSize;
                const endIndex = startIndex + this.pageSize;
                const pageUsers = this.filteredUsers.slice(startIndex, endIndex);

                pageUsers.forEach(user => {
                    const checkbox = document.querySelector(`[data-user-id="${user.id}"] input[type="checkbox"]`);
                    const row = document.querySelector(`[data-user-id="${user.id}"]`);

                    if (checkbox && row) {
                        checkbox.checked = selectAll;

                        if (selectAll) {
                            this.selectedUsers.add(user.id);
                            row.classList.add('selected');
                        } else {
                            this.selectedUsers.delete(user.id);
                            row.classList.remove('selected');
                        }
                    }
                });
            }

            updateSelectAllState() {
                const selectAllCheckbox = document.getElementById('selectAll');
                const startIndex = (this.currentPage - 1) * this.pageSize;
                const endIndex = startIndex + this.pageSize;
                const pageUsers = this.filteredUsers.slice(startIndex, endIndex);

                const pageUserIds = pageUsers.map(u => u.id);
                const selectedPageUsers = pageUserIds.filter(id => this.selectedUsers.has(id));

                if (selectedPageUsers.length === 0) {
                    selectAllCheckbox.checked = false;
                    selectAllCheckbox.indeterminate = false;
                } else if (selectedPageUsers.length === pageUserIds.length) {
                    selectAllCheckbox.checked = true;
                    selectAllCheckbox.indeterminate = false;
                } else {
                    selectAllCheckbox.checked = false;
                    selectAllCheckbox.indeterminate = true;
                }
            }

            openUserModal(user = null) {
                this.currentEditingUser = user;
                const modal = document.getElementById('userModal');
                const title = document.getElementById('userModalTitle');
                const form = document.getElementById('userForm');

                title.textContent = user ? 'Edit User' : 'Add New User';

                if (user) {
                    document.getElementById('userName').value = user.name;
                    document.getElementById('userEmail').value = user.email;
                    document.getElementById('useridno').value = user.idno;
                    document.getElementById('userDepartment').value = user.department;
                    document.getElementById('userRole').value = user.role;
                } else {
                    form.reset();
                }

                modal.classList.remove('hidden');
                document.getElementById('userName').focus();
            }

            closeUserModal() {
                const modal = document.getElementById('userModal');
                modal.classList.add('hidden');
                this.currentEditingUser = null;
            }

            handleUserSubmit(e) {
                e.preventDefault();

                const formData = new FormData(e.target);
                const userData = {
                    name: formData.get('name').trim(),
                    email: formData.get('email').trim(),
                    idno: formData.get('idno').trim(),
                    department: formData.get('department'),
                    role: formData.get('role')
                };

                // Validation
                if (!userData.name || !userData.email || !userData.idno ||
                    !userData.department || !userData.role) {
                    this.showToast('error', 'Error', 'All fields are required');
                    return;
                }

                // Check for duplicate email or ID (excluding current user if editing)
                const existingUser = this.users.find(u =>
                    (u.email === userData.email || u.idno === userData.idno) &&
                    (!this.currentEditingUser || u.id !== this.currentEditingUser.id)
                );

                if (existingUser) {
                    this.showToast('error', 'Error', 'Email or Student/Employee ID already exists');
                    return;
                }

                // Add department full name
                const deptMap = {
                    'CEIT': 'College of Engineering and Information Technology',
                    'CBAA': 'College of Business Administration and Accountancy',
                    'CELAS': 'College of Education, Liberal Arts, and Sciences',
                    'RPD': 'Research and Publication Department',
                    'SHS': 'Senior High School Department'
                };
                userData.departmentFull = deptMap[userData.department];
                userData.initials = userData.name.split(' ').map(n => n[0]).join('').substring(0, 2);

                if (this.currentEditingUser) {
                    // Update existing user
                    Object.assign(this.currentEditingUser, userData);
                    this.showToast('success', 'Success', `Updated user "${userData.name}"`);
                } else {
                    // Add new user
                    const newUser = {
                        id: Math.max(...this.users.map(u => u.id)) + 1,
                        ...userData,
                        lastLogin: new Date().toISOString()
                    };
                    this.users.push(newUser);
                    this.showToast('success', 'Success', `Added new user "${userData.name}"`);
                }

                this.updateStats();
                this.applyFilters();
                this.closeUserModal();
            }

            deleteUser(userId) {
                const user = this.users.find(u => u.id === userId);
                if (user) {
                    this.users = this.users.filter(u => u.id !== userId);
                    this.selectedUsers.delete(userId);
                    this.updateStats();
                    this.applyFilters();
                    this.showToast('success', 'Success', `Deleted user "${user.name}"`);
                }
            }

            confirmAction(type, title, message, callback) {
                const modal = document.getElementById('confirmModal');
                const titleEl = document.getElementById('confirmModalTitle');
                const messageEl = document.getElementById('confirmMessage');
                const iconEl = document.getElementById('confirmIcon');
                const confirmBtn = document.getElementById('confirmAction');

                titleEl.textContent = title;
                messageEl.textContent = message;

                // Set appropriate icon and button style
                if (type === 'delete') {
                    iconEl.innerHTML = '<i class="fas fa-exclamation-triangle"></i>';
                    iconEl.className = 'confirm-icon danger';
                    confirmBtn.className = 'btn btn-secondary';
                    confirmBtn.innerHTML = '<i class="fas fa-trash"></i> Delete';
                } else {
                    iconEl.innerHTML = '<i class="fas fa-info-circle"></i>';
                    iconEl.className = 'confirm-icon';
                    confirmBtn.className = 'btn btn-primary';
                    confirmBtn.innerHTML = '<i class="fas fa-check"></i> Confirm';
                }

                // Set up callback
                confirmBtn.onclick = () => {
                    callback();
                    this.closeConfirmModal();
                };

                modal.classList.remove('hidden');
            }

            closeConfirmModal() {
                const modal = document.getElementById('confirmModal');
                modal.classList.add('hidden');
            }

            exportData() {
                const dataToExport = this.filteredUsers.map(user => ({
                    Name: user.name,
                    Email: user.email,
                    'Student/Employee ID': user.idno,
                    Department: user.departmentFull || user.department,
                    Role: user.role,
                    'Last Login': this.formatLastLogin(user.lastLogin)
                }));

                const csv = this.convertToCSV(dataToExport);
                const blob = new Blob([csv], { type: 'text/csv' });
                const url = window.URL.createObjectURL(blob);
                const link = document.createElement('a');

                link.href = url;
                link.download = `users_export_${new Date().toISOString().split('T')[0]}.csv`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                window.URL.revokeObjectURL(url);

                this.showToast('success', 'Export Complete', `Exported ${dataToExport.length} user records`);
            }

            refreshData() {
                this.applyFilters();
                this.updateStats();
                this.showToast('success', 'Success', 'Data refreshed successfully');
            }

            // Utility functions
            getAvatarColor(name) {
                const colors = [
                    '#4f46e5', '#3b82f6', '#10b981', '#f59e0b', '#ef4444',
                    '#8b5cf6', '#f97316', '#ec4899', '#06b6d4', '#84cc16'
                ];
                const index = name.charCodeAt(0) % colors.length;
                return colors[index];
            }

            formatLastLogin(dateString) {
                if (!dateString) return 'Never';

                const date = new Date(dateString);
                const now = new Date();
                const diffMs = now - date;
                const diffMins = Math.floor(diffMs / 60000);
                const diffHours = Math.floor(diffMs / 3600000);
                const diffDays = Math.floor(diffMs / 86400000);

                if (diffMins < 60) {
                    return `${diffMins} min ago`;
                } else if (diffHours < 24) {
                    return `${diffHours} hr ago`;
                } else if (diffDays < 7) {
                    return `${diffDays} day${diffDays !== 1 ? 's' : ''} ago`;
                } else {
                    return date.toLocaleDateString('en-US', {
                        month: 'short',
                        day: 'numeric',
                        year: 'numeric'
                    });
                }
            }

            convertToCSV(data) {
                if (data.length === 0) return '';

                const headers = Object.keys(data[0]);
                const csvContent = [
                    headers.join(','),
                    ...data.map(row =>
                        headers.map(header => {
                            const value = row[header] || '';
                            return `"${value.toString().replace(/"/g, '""')}"`;
                        }).join(',')
                    )
                ].join('\n');

                return csvContent;
            }

            debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }

            showToast(type, title, message) {
                const container = document.getElementById('toastContainer');
                const toast = document.createElement('div');
                toast.className = `toast toast-${type}`;

                toast.innerHTML = `
                    <div class="toast-icon">
                        <i class="fas fa-${type === 'success' ? 'check' : type === 'error' ? 'times' : 'info'}"></i>
                    </div>
                    <div class="toast-content">
                        <div class="toast-title">${title}</div>
                        <p class="toast-message">${message}</p>
                    </div>
                    <button class="toast-close">
                        <i class="fas fa-times"></i>
                    </button>
                `;

                toast.querySelector('.toast-close').addEventListener('click', () => {
                    this.removeToast(toast);
                });

                container.appendChild(toast);

                // Trigger animation
                setTimeout(() => toast.classList.add('show'), 100);

                // Auto remove after 5 seconds
                setTimeout(() => this.removeToast(toast), 5000);
            }

            removeToast(toast) {
                toast.classList.remove('show');
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }
        }

        // Initialize the application
        document.addEventListener('DOMContentLoaded', () => {
            window.userManagement = new UserManagement();
        });
    </script>
</body>
</html>